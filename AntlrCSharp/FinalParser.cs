//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Final.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class FinalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CONDITIONAL=1, CON=2, IF=3, ELSE=4, END=5, NEWLINE=6, WHITE=7, WS=8, EQUALS=9, 
		ARITHMETIC=10, INTEGER=11, BOOLEAN=12, FLOATS=13, STRING=14, ID=15;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_assign = 2, RULE_literals = 3, RULE_arithmetic = 4, 
		RULE_statements = 5, RULE_block = 6, RULE_elseIf = 7, RULE_condition = 8;
	public static readonly string[] ruleNames = {
		"prog", "line", "assign", "literals", "arithmetic", "statements", "block", 
		"elseIf", "condition"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "CONDITIONAL", "CON", "IF", "ELSE", "END", "NEWLINE", "WHITE", "WS", 
		"EQUALS", "ARITHMETIC", "INTEGER", "BOOLEAN", "FLOATS", "STRING", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Final.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FinalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FinalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FinalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FinalParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << NEWLINE) | (1L << ID))) != 0)) {
				{
				{
				State = 18;
				line();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 24;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(FinalParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(FinalParser.NEWLINE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 26;
				Match(NEWLINE);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 32;
				assign();
				}
				break;
			case IF:
				{
				State = 33;
				statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 36;
					Match(NEWLINE);
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(FinalParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(FinalParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FinalParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticContext arithmetic() {
			return GetRuleContext<ArithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralsContext literals() {
			return GetRuleContext<LiteralsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHMETIC() { return GetToken(FinalParser.ARITHMETIC, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 4, RULE_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(ID);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARITHMETIC) {
				{
				State = 43;
				Match(ARITHMETIC);
				}
			}

			State = 46;
			Match(EQUALS);
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case BOOLEAN:
			case FLOATS:
			case STRING:
				{
				State = 47;
				literals();
				}
				break;
			case ID:
				{
				State = 48;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 51;
			arithmetic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FinalParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FinalParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(FinalParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATS() { return GetToken(FinalParser.FLOATS, 0); }
		public LiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterLiterals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitLiterals(this);
		}
	}

	[RuleVersion(0)]
	public LiteralsContext literals() {
		LiteralsContext _localctx = new LiteralsContext(Context, State);
		EnterRule(_localctx, 6, RULE_literals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << BOOLEAN) | (1L << FLOATS) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARITHMETIC() { return GetTokens(FinalParser.ARITHMETIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHMETIC(int i) {
			return GetToken(FinalParser.ARITHMETIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(FinalParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(FinalParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(FinalParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(FinalParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOATS() { return GetTokens(FinalParser.FLOATS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATS(int i) {
			return GetToken(FinalParser.FLOATS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(FinalParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(FinalParser.STRING, i);
		}
		public ArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterArithmetic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitArithmetic(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticContext arithmetic() {
		ArithmeticContext _localctx = new ArithmeticContext(Context, State);
		EnterRule(_localctx, 8, RULE_arithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARITHMETIC) {
				{
				{
				State = 55;
				Match(ARITHMETIC);
				State = 56;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOATS) | (1L << STRING) | (1L << ID))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FinalParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END() { return GetTokens(FinalParser.END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END(int i) {
			return GetToken(FinalParser.END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(FinalParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(FinalParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONDITIONAL() { return GetTokens(FinalParser.CONDITIONAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL(int i) {
			return GetToken(FinalParser.CONDITIONAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext[] elseIf() {
			return GetRuleContexts<ElseIfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf(int i) {
			return GetRuleContext<ElseIfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FinalParser.ELSE, 0); }
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 10, RULE_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(IF);
			State = 63;
			condition();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONDITIONAL) {
				{
				{
				State = 64;
				Match(CONDITIONAL);
				State = 65;
				condition();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			Match(END);
			State = 72;
			Match(NEWLINE);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 73;
				block();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHITE );
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 78;
					elseIf();
					}
					} 
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 84;
				Match(ELSE);
				State = 85;
				Match(END);
				State = 86;
				Match(NEWLINE);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 87;
					block();
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHITE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITE() { return GetToken(FinalParser.WHITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(FinalParser.NEWLINE, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(WHITE);
			State = 95;
			line();
			State = 96;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FinalParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FinalParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FinalParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(FinalParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONDITIONAL() { return GetTokens(FinalParser.CONDITIONAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL(int i) {
			return GetToken(FinalParser.CONDITIONAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitElseIf(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(ELSE);
			State = 99;
			Match(IF);
			State = 100;
			condition();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONDITIONAL) {
				{
				{
				State = 101;
				Match(CONDITIONAL);
				State = 102;
				condition();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(END);
			State = 109;
			Match(NEWLINE);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 110;
				block();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHITE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CON() { return GetToken(FinalParser.CON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralsContext[] literals() {
			return GetRuleContexts<LiteralsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralsContext literals(int i) {
			return GetRuleContext<LiteralsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(FinalParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(FinalParser.ID, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFinalListener typedListener = listener as IFinalListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case BOOLEAN:
			case FLOATS:
			case STRING:
				{
				State = 115;
				literals();
				}
				break;
			case ID:
				{
				State = 116;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 119;
			Match(CON);
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case BOOLEAN:
			case FLOATS:
			case STRING:
				{
				State = 120;
				literals();
				}
				break;
			case ID:
				{
				State = 121;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '\x7F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\a', 
		'\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '!', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '%', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '(', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '+', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '/', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x34', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '<', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '?', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x45', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'H', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x6', '\a', 'M', '\n', '\a', '\r', '\a', '\xE', '\a', 'N', '\x3', 
		'\a', '\a', '\a', 'R', '\n', '\a', '\f', '\a', '\xE', '\a', 'U', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', 
		'[', '\n', '\a', '\r', '\a', '\xE', '\a', '\\', '\x5', '\a', '_', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'j', '\n', 
		'\t', '\f', '\t', '\xE', '\t', 'm', '\v', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x6', '\t', 'r', '\n', '\t', '\r', '\t', '\xE', '\t', 's', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'x', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '}', '\n', '\n', '\x3', '\n', '\x2', '\x2', 
		'\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', 
		'\x4', '\x3', '\x2', '\r', '\x10', '\x4', '\x2', '\r', '\r', '\xF', '\x11', 
		'\x2', '\x85', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', 
		'\f', '@', '\x3', '\x2', '\x2', '\x2', '\xE', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x64', '\x3', '\x2', '\x2', '\x2', '\x12', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', '\x15', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x2', '\x2', 
		'\x3', '\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', 
		'\b', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '$', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x5', 
		'\x6', '\x4', '\x2', '#', '%', '\x5', '\f', '\a', '\x2', '$', '\"', '\x3', 
		'\x2', '\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', ')', '\x3', 
		'\x2', '\x2', '\x2', '&', '(', '\a', '\b', '\x2', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\a', '\x11', '\x2', '\x2', '-', '/', '\a', '\f', '\x2', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\a', '\v', '\x2', 
		'\x2', '\x31', '\x34', '\x5', '\b', '\x5', '\x2', '\x32', '\x34', '\a', 
		'\x11', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\n', '\x6', '\x2', '\x36', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\t', '\x2', '\x2', '\x2', '\x38', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\f', '\x2', '\x2', 
		':', '<', '\t', '\x3', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\v', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 
		'\x5', '\x2', '\x2', '\x41', '\x46', '\x5', '\x12', '\n', '\x2', '\x42', 
		'\x43', '\a', '\x3', '\x2', '\x2', '\x43', '\x45', '\x5', '\x12', '\n', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\a', '\x2', 
		'\x2', 'J', 'L', '\a', '\b', '\x2', '\x2', 'K', 'M', '\x5', '\xE', '\b', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'S', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x5', '\x10', 
		'\t', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', '^', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\x6', '\x2', '\x2', 'W', 'X', '\a', '\a', 
		'\x2', '\x2', 'X', 'Z', '\a', '\b', '\x2', '\x2', 'Y', '[', '\x5', '\xE', 
		'\b', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', 
		'\x2', '\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', 'V', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\r', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\t', '\x2', '\x2', '\x61', 
		'\x62', '\x5', '\x4', '\x3', '\x2', '\x62', '\x63', '\a', '\b', '\x2', 
		'\x2', '\x63', '\xF', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x6', '\x2', '\x2', '\x65', '\x66', '\a', '\x5', '\x2', '\x2', '\x66', 
		'k', '\x5', '\x12', '\n', '\x2', 'g', 'h', '\a', '\x3', '\x2', '\x2', 
		'h', 'j', '\x5', '\x12', '\n', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\a', '\x2', '\x2', 
		'o', 'q', '\a', '\b', '\x2', '\x2', 'p', 'r', '\x5', '\xE', '\b', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x11', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x5', '\b', '\x5', 
		'\x2', 'v', 'x', '\a', '\x11', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\a', '\x4', '\x2', '\x2', 'z', '}', '\x5', '\b', '\x5', 
		'\x2', '{', '}', '\a', '\x11', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x17', '\x1F', '$', ')', '.', '\x33', '=', '\x46', 
		'N', 'S', '\\', '^', 'k', 's', 'w', '|',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

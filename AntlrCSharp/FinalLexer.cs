//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Final.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class FinalLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, WS=2, EQUALS=3, ARITHMETIC=4, INTEGER=5, BOOLEAN=6, FLOATS=7, 
		STRING=8, ID=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "NEWLINE", "WS", "EQUALS", "ARITHMETIC", "INTEGER", 
		"BOOLEAN", "FLOATS", "STRING", "ID"
	};


	public FinalLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FinalLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "WS", "EQUALS", "ARITHMETIC", "INTEGER", "BOOLEAN", "FLOATS", 
		"STRING", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Final.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FinalLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', 'g', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x6', '\x4', '\x1F', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', ' ', '\x3', '\x5', '\x6', '\x5', '$', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', '%', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', '\b', '/', '\n', 
		'\b', '\x3', '\b', '\x6', '\b', '\x32', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '\x33', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'H', '\n', '\t', '\x3', '\n', 
		'\x5', '\n', 'K', '\n', '\n', '\x3', '\n', '\a', '\n', 'N', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'Q', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x6', 
		'\n', 'U', '\n', '\n', '\r', '\n', '\xE', '\n', 'V', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '[', '\n', '\v', '\f', '\v', '\xE', '\v', '^', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x6', '\f', 
		'\x64', '\n', '\f', '\r', '\f', '\xE', '\f', '\x65', '\x3', '\\', '\x2', 
		'\r', '\x3', '\x2', '\x5', '\x2', '\a', '\x3', '\t', '\x4', '\v', '\x5', 
		'\r', '\x6', '\xF', '\a', '\x11', '\b', '\x13', '\t', '\x15', '\n', '\x17', 
		'\v', '\x3', '\x2', '\b', '\x3', '\x2', '\x63', '|', '\x3', '\x2', '\x43', 
		'\\', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x4', '\x2', '\v', '\v', 
		'\"', '\"', '\x6', '\x2', '\'', '\'', ',', '-', '/', '/', '\x31', '\x31', 
		'\x3', '\x2', '\x32', ';', '\x2', 'q', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\t', '#', '\x3', '\x2', '\x2', '\x2', 
		'\v', ')', '\x3', '\x2', '\x2', '\x2', '\r', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '.', '\x3', '\x2', '\x2', '\x2', '\x11', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x13', 'J', '\x3', '\x2', '\x2', '\x2', '\x15', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x63', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\t', '\x2', '\x2', '\x2', '\x1A', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\t', '\x3', '\x2', '\x2', '\x1C', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1F', '\t', '\x4', '\x2', '\x2', '\x1E', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', 
		'\x2', '\x2', '!', '\b', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\t', 
		'\x5', '\x2', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', 
		'\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\b', '\x5', '\x2', '\x2', '(', '\n', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\a', '?', '\x2', '\x2', '*', '\f', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\t', '\x6', '\x2', '\x2', ',', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '-', '/', '\a', '/', '\x2', '\x2', '.', '-', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\t', '\a', '\x2', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x10', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\a', 'V', '\x2', '\x2', '\x36', '\x37', '\a', 't', '\x2', '\x2', 
		'\x37', '\x38', '\a', 'w', '\x2', '\x2', '\x38', 'H', '\a', 'g', '\x2', 
		'\x2', '\x39', ':', '\a', 'v', '\x2', '\x2', ':', ';', '\a', 't', '\x2', 
		'\x2', ';', '<', '\a', 'w', '\x2', '\x2', '<', 'H', '\a', 'g', '\x2', 
		'\x2', '=', '>', '\a', 'H', '\x2', '\x2', '>', '?', '\a', '\x63', '\x2', 
		'\x2', '?', '@', '\a', 'n', '\x2', '\x2', '@', '\x41', '\a', 'u', '\x2', 
		'\x2', '\x41', 'H', '\a', 'g', '\x2', '\x2', '\x42', '\x43', '\a', 'h', 
		'\x2', '\x2', '\x43', '\x44', '\a', '\x63', '\x2', '\x2', '\x44', '\x45', 
		'\a', 'n', '\x2', '\x2', '\x45', '\x46', '\a', 'u', '\x2', '\x2', '\x46', 
		'H', '\a', 'g', '\x2', '\x2', 'G', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'G', '\x39', '\x3', '\x2', '\x2', '\x2', 'G', '=', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x42', '\x3', '\x2', '\x2', '\x2', 'H', '\x12', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'K', '\a', '/', '\x2', '\x2', 'J', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'N', '\t', '\a', '\x2', '\x2', 'M', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\a', '\x30', 
		'\x2', '\x2', 'S', 'U', '\t', '\a', '\x2', '\x2', 'T', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\x14', '\x3', 
		'\x2', '\x2', '\x2', 'X', '\\', '\a', '$', '\x2', '\x2', 'Y', '[', '\v', 
		'\x2', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', 
		'\\', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '$', '\x2', '\x2', '`', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x5', '\x3', '\x2', 
		'\x2', '\x62', '\x64', '\x5', '\x5', '\x3', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x2', ' ', '%', '.', '\x33', 'G', 'J', 'O', 
		'V', '\\', '\x63', '\x65', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
